@model IEnumerable<MvcMain.Models.Main>

@{
    ViewBag.Title = "Index";
}


@{
    //    Layout = null;
}
@section head {
    @Styles.Render("~/Content/colorbox.css")
    <link href="@Url.Content("~/Content/calender.css")" rel="stylesheet" type="text/css" />
    @* IE11対応 (Promiseのエラー解消のため) *@
    <script>window.Promise || document.write('<script src="//www.promisejs.org/polyfills/promise-7.0.4.min.js"><\/script>');</script>
    @* jsFrame CDN *@
    <script src="https://riversun.github.io/jsframe/jsframe.js"></script>
    <script>
            // jQueryでのpost送信用に、formデータを生成するメソッド
            function createFormInputsFromObject(data, prefix) {
                prefix = prefix || '';
                var inputs = '';
                // 引数で渡された全ての項目に対して処理
                $.each(data, function (name, value) {
                    if (prefix !== '') name = prefix + '[' + name + ']';
                    // 該当項目が配列の場合は再帰処理
                    if (Array.isArray(value) || value instanceof Object) {
                        inputs += createFormInputsFromObject(value, name);
                    } else {
                        // hidden属性を持つinputタグをname,valueをセットし生成
                        inputs += $('<input>').attr({
                            type: 'hidden',
                            name: name,
                            value: value
                        }).prop('outerHTML');
                    }
                });

                return inputs;
            }
            var calender;
            var jsFrame;
            var seisanframe;
            @*/**
                * オリジナルのアピアランスをセットする
                * @param apr
                * @returns {*}
                */*@
            function populateOriginalStyle(apr) {

                apr.titleBarCaptionFontSize = '12px';
                apr.titleBarCaptionFontWeight = 'normal';
                apr.titleBarCaptionLeftMargin = '10px';
                apr.titleBarCaptionColorDefault = '#4d494d';
                apr.titleBarCaptionColorFocused = '#4d494d';
                apr.titleBarHeight = '0px';
                apr.titleBarColorDefault = 'white';
                apr.titleBarColorFocused = 'white';
                apr.titleBarBorderBottomDefault = null;
                apr.titleBarBorderBottomFocused = null;
                apr.frameBorderRadius = '6px';
                apr.frameBorderWidthDefault = '4px';
                apr.frameBorderWidthFocused = '4px';
                apr.frameBorderColorDefault = '#ffffff';
                apr.frameBorderColorFocused = '#1883d7';
                apr.frameBorderStyle = 'solid';
                apr.frameBoxShadow = '0px 0px 0px rgba(0, 0, 0)';
                apr.frameBorderStyle = 'solid';
                apr.frameBackgroundColor = 'white';
                apr.frameComponents = [];
                apr.frameHeightAdjust = 1;

                apr.onInitialize = function () {
                    var partsBuilder = apr.getPartsBuilder();
                    var btApr = partsBuilder.buildTextButtonAppearance();
                    btApr.width = 20;
                    btApr.height = 20;
                    btApr.borderRadius = 10;
                    btApr.borderWidth = 1;
                    btApr.borderColorDefault = '#cccccc';
                    btApr.borderColorFocused = '#cccccc';
                    btApr.borderColorHovered = '#dddddd';
                    btApr.borderColorPressed = '#eeeeee';
                    btApr.borderStyleDefault = 'solid';
                    btApr.borderStyleFocused = btApr.borderStyleDefault;
                    btApr.borderStyleHovered = btApr.borderStyleDefault;
                    btApr.borderStylePressed = btApr.borderStyleDefault;
                    btApr.backgroundColorDefault = 'white';
                    btApr.backgroundColorFocused = 'white';
                    btApr.backgroundColorHovered = '#eeeeee';
                    btApr.backgroundColorPressed = '#dddddd';
                    btApr.backgroundBoxShadow = '2px 2px 5px  rgba(0, 0, 0, 0.5)';
                    btApr.caption = '\u2716';
                    btApr.captionColorDefault = 'black';
                    btApr.captionColorFocused = 'black';
                    btApr.captionColorHovered = 'white';
                    btApr.captionColorPressed = 'white';
                    btApr.captionShiftYpx = 1;
                    btApr.captionFontRatio = 0.6;

                    var btEle = partsBuilder.buildTextButton(btApr);
                    var eleLeft = 10;
                    var eleTop = -12 - parseInt(apr.titleBarHeight);
                    var eleAlign = 'RIGHT_TOP';
                    //// 'closeButton' is a special name
                    apr.addFrameComponent('closeButton', btEle, eleLeft, eleTop, eleAlign);
                };
                return apr;
            }
            function convertRemToPixels(rem) {
                return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
            }
            let showSeisan = function (year, month) {
                //アピアランス（ウィンドウの見た目）オブジェクトを生成する
                const appearance = jsFrame.createFrameAppearance();
                const baseurl = "@Url.Action("Seisan", "Main")";
                const merginleft = convertRemToPixels(2);
                const newframe = jsFrame.create({
                    name: "seisanframe",
                    title: '精算金額',
                    url: baseurl + '?Year=' + year + '&Month=' + month,//iframe内に表示するURL
                    movable: true,//マウスで移動可能
                    resizable: false,//マウスでリサイズ可能
                    left: calendar.el.offsetLeft + calendar.el.offsetWidth + merginleft, top: calendar.el.offsetTop, width: 350, height: 300,
                    style: {
                        backgroundColor: 'rgba(255,255,255,0.9)',
                        overflow: 'hidden'
                    },
                    appearance: populateOriginalStyle(appearance),
                    //html: '<div style="padding:10px;height:100%">ゼロからアピアランスを自作する</div>'
                });
                return newframe;
            }

            document.addEventListener('DOMContentLoaded', function () {
                // カレンダー設定
                const calendarEl = document.getElementById('calendar');
                calendar = new FullCalendar.Calendar(calendarEl, {
                    // ヘッダツールバー設定
                    //   （左：戻る、次へ、今日）
                    //   （中央：タイトル）
                    //   （右：月、週、日）
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth'/*,timeGridWeek,timeGridDay'*/ //月表示
                    },
                    // ロケール設定：日本語
                    locale: 'ja',
                    // bootstrapとの共有
                    themeSystem: 'bootstrap',
                    // 初期日時
                    initialDate: '@DateTime.Now.ToString("yyyy-MM-dd")' ,
                    // 日付のリンク設定(クリックすると日単位の表示へ)
                    navLinks: false,
                    // 営業時間表示（土日の背景切り替えもこの設定)
                    businessHours: true,
                    // 編集可否
                    editable: false,
                    // 選択可否
                    selectable: true,
                    // 時間の表示=OFF
                    displayEventTime: false,
                    // 時間の表示書式(h:mm)
                    eventTimeFormat: {
                        hour: 'numeric',
                        minute: '2-digit'
                    },
                    // eventDidMount=イベント毎のDOM生成後の処理
                    // 対象のイベント項目にPopperを適用する
                    eventDidMount: function (info) {
                        /*
                        const tooltip = new Tooltip(info.el, {
                            title: info.event.extendedProps.description,
                            placement: 'top',
                            trigger: 'hover',
                            container: 'body'
                        });
                        */
                    },
                    // 対象イベントのクリック処理
                    eventClick: function (info) {
                        console.log('Event: ' + info.event.title + ',id: ' + info.event.id);
                        console.log('View: ' + info.view.type);
                        const baseurl = "@Url.Action("Details", "Main")";
                        $.colorbox({
                            width: "35%",
                            height: "80%",
                            iframe: true,
                            href: baseurl + "?id=" + info.event.id
                        });
                    },
                    // 日付をクリック
                    dateClick: function (info) {
                        $.colorbox({
                            width: "35%",
                            height: "80%",
                            iframe: true,
                            href: "./Create?date=" + info.date.getFullYear() + "/" + info.date.getMonth + "/" + info.date.getDate()
                        });
                    },
                    // イベント(スケジュール)情報
                    events: function (info, successCallback, failureCallback) {
                        let yearmonth = new Date(info.start.getFullYear(), info.start.getMonth(), info.start.getDate());
                        yearmonth.setDate(yearmonth.getDate() + 14);
                        let year = yearmonth.getFullYear();
                        let month = yearmonth.getMonth() + 1;
                        $.ajax({
                            type: 'GET',    //WebMethods will not allow GET
                            url: '../API/Main/GetCalendarEvents?Year=' + year + '&Month=' + month,
                            //completely take out 'data:' line if you don't want to pass to webmethod - Important to also change webmethod to not accept any parameters
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (doc) {
                                var events = [];   //javascript event object created here

                                var obj = doc;
                                $.each(obj, function (index, val) {
                                    events.push({
                                        title: $(this).attr('title'),
                                        start: $(this).attr('start'),
                                        end: $(this).attr('end'),
                                        id: $(this).attr('id'),
                                        color: $(this).attr('color')
                                    });
                                });
                                if (seisanframe != undefined) {
                                    seisanframe.closeFrame();
                                    delete seisanframe
                                }

                                seisanframe = showSeisan(year, month);
                                seisanframe.show();
                                seisanframe.requestFocus();

                                successCallback(events);
                            }
                        });
                    }
                });
                jsFrame = new JSFrame({ parentElement: document.querySelector('#calendar') }); // parentElementを設定しないとz-indexがbodyと同じインデックスになる
                calendar.render();
                seisanframe = showSeisan(@DateTime.Now.ToString("yyyy"),@DateTime.Now.ToString("MM"))
                seisanframe.show();
                seisanframe.requestFocus();
            });
    </script>
    <style>
        body {
            margin: 40px 10px;
            padding: 0;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        }

        #calendar {
            max-width: 1100px;
            margin: 0 auto;
        }
        /* 土曜日の表示枠色設定 */

        td.fc-day-sat {
            background-color: #eaf4ff;
        }
        /* 日曜日の表示枠色設定 */

        td.fc-day-sun,
        fc-day-hol {
            background-color: #ffeaea;
        }

        .holiday-name {
            width: 90px;
            font-size: 13px;
            color: red;
        }
    </style>
}
@section scripts {
    @*//FullCalender メインJSの読み込み*@
    <script src="@Url.Content("~/Scripts/calender/calender.js")" type="text/javascript"></script>
    @*ヘッダ部分の日本語化JS(locales-all.js)の読み込み*@
    <script src="@Url.Content("~/Scripts/calender/locales-all.js")" type="text/javascript"></script>
    <script src="https://riversun.github.io/jsframe/jsframe.js"></script>
}

<div class="f-container">
    <div class="flex1">
        <font size="5">
            <span class="mgr-30">@Html.ActionLink("登録", "Create")</span>
            @*<a href="Create?Year=2021?Date=3"><span class="mgr-30"><u>登録</u></span></a>*@
            <span class="mgr-30">@Html.ActionLink("グラフ", "Index", "Chart", new { Year = DateTime.Today.Year, Month = DateTime.Today.Month }, null)</span>
        </font><br><br>
        <div id="calendar"></div>
    </div>
</div>
